#!/usr/bin/env python

from optparse import OptionParser
import multiprocessing
import os, sys
import math
from socket import gethostname
from string import *
from time import localtime, strftime

import delitecommon
from delitecommon import *

def main():
    usage = "usage: %prog <application runner> [params] [options]"
    parser = OptionParser(usage)
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose")
    parser.add_option("-t", "--threads", dest="num_threads", default="1", help="num execution threads e.g. 4")
    parser.add_option("-g", "--gpu", action="store_const", const="1", dest="num_gpus", default="0", help="enable gpu execution")
    parser.add_option("-r", "--runs", dest="num_runs", default="1", type="string", help="the number of times the runtime will execute the applications")

    (opts, args) = parser.parse_args()
    if len(args) < 1:
        parser.error("a DEG file is required as an argument")

    delitecommon.initialize()
    run(args[0], args[1:len(args)], opts)
 
def parseBuildDir(deg):
    if not os.path.isfile(deg):
        err("couldn't find DEG file " + deg)

    with open(deg) as f:
      head = [f.next() for x in xrange(3)]
    
    fields = ''.join(head).split(",")
    kernelpath = fields[len(fields)-2].split(":") 
    build_dir = kernelpath[len(kernelpath)-1]
    if (build_dir.strip('\n') == ""):
      err("DEG file " + deg + " appears to be invalid; could not parse kernelpath")

    return build_dir

def run(deg, params, opts):
    java_opts = os.getenv("JAVA_OPTS", "")

    if not os.path.isfile(deg):
      if not (os.path.isfile(deg + ".deg")):
        err("couldn't find DEG file: " + deg)
      else:
        deg = deg + ".deg"

    build_dir = parseBuildDir(deg)
    ld_library_path = filter(len, os.getenv("LD_LIBRARY_PATH", "").split(":"))
    ld_library_path.append(build_dir+"/libraries")
    os.putenv("LD_LIBRARY_PATH", ":".join(ld_library_path))


    java_opts = java_opts + " -Ddelite.home=" + delitecommon.DELITE_HOME + " -Ddelite.threads=" + str(opts.num_threads) + " -Ddelite.gpus=" + opts.num_gpus + " -Ddelite.runs=" + opts.num_runs

    #add classpaths
    cp = " -cp "
    cp = cp + delitecommon.DELITE_HOME + "/runtime/target/" + delitecommon.scala_virt_version + "/classes" + os.pathsep
    cp = cp + delitecommon.SCALA_VIRT_HOME + "/scala-library.jar" + os.pathsep
    cp = cp + delitecommon.SCALA_VIRT_HOME + "/scala-compiler.jar"

    java_opts = java_opts + cp
    #os.putenv("JAVA_OPTS", java_opts)

    #MKL ENV
    os.putenv("LD_PRELOAD", delitecommon.JAVA_HOME + "/jre/lib/amd64/libjsig.so")
    os.putenv("OMP_NUM_THREADS", str(opts.num_threads))
    
    if opts.verbose:
        delitecommon.printEnv()

    print "== executing application: " + deg + " " + ' '.join(params)
    print "== with options: " + java_opts + "\n" 
    java_cmd = delitecommon.JAVA_HOME + "/bin/java " + java_opts + " ppl.delite.runtime.Delite " + deg + " " + ' '.join(params)
    #print java_cmd
    ecode = os.system(java_cmd)
    if ecode != 0:
        err("Delite execution failed")

if __name__ == "__main__":
    main()
